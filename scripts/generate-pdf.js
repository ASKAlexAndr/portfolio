const puppeteer = require('puppeteer');
const path = require('path');
const fs = require('fs');

async function generatePDF(htmlFile, outputFile) {
  const browser = await puppeteer.launch({
    headless: true,
    args: ['--no-sandbox', '--disable-setuid-sandbox']
  });

  try {
    const page = await browser.newPage();
    
    // –ü—É—Ç—å –∫ HTML —Ñ–∞–π–ª—É
    const htmlPath = path.join(__dirname, '../public/cv', htmlFile);
    const htmlContent = fs.readFileSync(htmlPath, 'utf8');
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    await page.setContent(htmlContent, {
      waitUntil: 'networkidle0'
    });

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º PDF
    const pdfBuffer = await page.pdf({
      format: 'A4',
      printBackground: true,
      margin: {
        top: '20mm',
        right: '20mm',
        bottom: '20mm',
        left: '20mm'
      }
    });

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º PDF —Ñ–∞–π–ª
    const outputPath = path.join(__dirname, '../public/cv', outputFile);
    fs.writeFileSync(outputPath, pdfBuffer);
    
    console.log(`‚úÖ PDF —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω: ${outputPath}`);
    
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF –¥–ª—è ${htmlFile}:`, error);
  } finally {
    await browser.close();
  }
}

async function generateAllPDFs() {
  console.log('üöÄ –ù–∞—á–∏–Ω–∞—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é PDF —Ñ–∞–π–ª–æ–≤...');
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä—É—Å—Å–∫—É—é –≤–µ—Ä—Å–∏—é
  await generatePDF('cv-ru.html', 'cv-ru.pdf');
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞–Ω–≥–ª–∏–π—Å–∫—É—é –≤–µ—Ä—Å–∏—é
  await generatePDF('cv-en.html', 'cv-en.pdf');
  
  console.log('üéâ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF —Ñ–∞–π–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
}

generateAllPDFs();
